# # Define variables
# variables:
#   RestoreBuildProjects: '**/*.csproj'
#   BuildConfiguration: 'Release'  # Define the BuildConfiguration variable

# # Specify the trigger
# trigger:
#   branches:
#     include:
#       - main
#   paths:
#     exclude:
#       - azure-pipelines.yaml  # Exclude changes to the pipeline YAML file

# # Specify the PR trigger
# pr: none  # Exclude pull requests from triggering the pipeline

# # Specify the pool and agent
# pool:
#   vmImage: 'windows-latest'  # Specify the agent pool and image

# # Define the stages
# stages:
# - stage: Build
#   displayName: 'Build Stage'
#   jobs:
#   - job: BuildJob
#     displayName: 'Build Job'
#     steps:
#     # Checkout the code
#     - checkout: self
#       displayName: 'Checkout Code'

#     # Restore dependencies
#     - task: DotNetCoreCLI@2
#       displayName: 'Restore dependencies'
#       inputs:
#         command: restore
#         projects: '$(RestoreBuildProjects)'

#     # Build project
#     - task: DotNetCoreCLI@2
#       displayName: 'Build project'
#       inputs:
#         command: build
#         projects: '$(RestoreBuildProjects)'
#         arguments: '--configuration $(BuildConfiguration)'

#     # Publish project
#     - task: DotNetCoreCLI@2
#       displayName: 'Publish project'
#       inputs:
#         command: publish
#         publishWebProjects: true
#         arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#         zipAfterPublish: true

#     # Publish artifacts
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish Build Artifacts'
#       inputs:
#         PathtoPublish: '$(build.artifactstagingdirectory)'
#         ArtifactName: 'drop'
#         publishLocation: 'Container'

# - stage: Deploy
#   displayName: 'Deploy Stage'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeployJob
#     displayName: 'Deploy Job'
#     environment: 'Production'  # Specify the environment with approvals
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           # Deploy to Azure Web App
#           - task: AzureRmWebAppDeployment@4
#             displayName: 'Deploy to Azure Web App'
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: 'Free Trial(c76eba7d-3791-4b1a-ac0a-e3914e169a45)'
#               appType: 'webApp'
#               WebAppName: 'Dotnetapppppp'
#               packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'






# Define variables
variables:
  RestoreBuildProjects: '**/*.csproj'
  BuildConfiguration: 'Release'

# Specify the trigger
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipelines.yaml

# Specify the PR trigger
pr: none

# Specify the pool and agent
pool:
  vmImage: 'windows-latest'

# Define the stages
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    # Checkout the code
    - checkout: self
      displayName: 'Checkout Code'

    # Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: restore
        projects: '$(RestoreBuildProjects)'

    # Build project
    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: build
        projects: '$(RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'

    # Publish project
    - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: true

    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy Job'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Azure Web App Deployment
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure Web App Deploy'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Free Trial(c76eba7d-3791-4b1a-ac0a-e3914e169a45)'
              appType: 'webApp'
              WebAppName: 'Dotnetapppppp'
              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

          # Placeholder for additional deployment steps
          - script: echo 'Deploying...'
